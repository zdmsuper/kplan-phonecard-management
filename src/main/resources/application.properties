#springboot_config
#spring.profiles.active=derby
server.port=9898
server.servlet.context-path=/
#context.listener.classes=com.sparrow.hadmin.config.listener.ApplicationEventListener

logging.config=classpath:logback.xml
spring.main.allow-bean-definition-overriding=true
# jdbc_config
#spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#spring.datasource.driverClassName =com.p6spy.engine.spy.P6SpyDriver
##spring.datasource.driver-class-name=com.p6spy.engine.spy.P6SpyDriver
##spring.datasource.url=jdbc:mysql://127.0.0.1:3306/tuobei3?characterEncoding=utf8&useSSL=false
##spring.datasource.url=jdbc:mysql://127.0.0.1:3306/memberdb?characterEncoding=utf8&useSSL=false
#spring.datasource.url=jdbc:p6spy:h2:file:~/.h2/membership.db 
#spring.datasource.username=root
#spring.datasource.password=123456
#spring.datasource.data =  classpath:data.sql
##always
#spring.datasource.initialization-mode=never
#spring.datasource.separator=^
#
#spring.datasource.druid.dbType=h2
#spring.datasource.druid.testWhileIdle=true
#spring.datasource.druid.validationQuery=select 1
#spring.datasource.druid.filter.config.enabled=true
##spring.datasource.druid.filter.stat.enabled=true
##spring.datasource.druid.filter.wall.enabled=true
###spring.datasource.druid.filter.slf4j.enabled=true
#
##spring.datasource.druid.filter.slf4j.statement-executable-sql-log-enable=true
#
###spring.datasource.druid.filter.slf4j.statement-create-after-log-enabled=false
###spring.datasource.druid.filter.slf4j.statement-parameter-set-log-enabled=false
###spring.datasource.druid.filter.slf4j.statement-execute-after-log-enabled=false
###spring.datasource.druid.filter.slf4j.statement-close-after-log-enabled=false
###spring.datasource.druid.filter.slf4j.statement-prepare-after-log-enabled=false
###spring.datasource.druid.filter.slf4j.statement-prepare-call-after-log-enabled=false
###spring.datasource.druid.filter.slf4j.statement-execute-query-after-log-enabled=false
###spring.datasource.druid.filter.slf4j.statement-execute-update-after-log-enabled=false
###spring.datasource.druid.filter.slf4j.statement-execute-batch-after-log-enabled=false
###spring.datasource.druid.filter.slf4j.statement-parameter-clear-log-enable=false



# jdbc_config
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://47.99.219.4:13432/operate
spring.datasource.username=postgres
spring.datasource.password=g@22w0rd

#spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/memberdb?characterEncoding=utf8&useSSL=false&autoReconnect=true&serverTimezone=GMT%2B8
#spring.datasource.username=root
#spring.datasource.password=123456
# Hikari will use the above plus the following to setup connection pooling
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#spring.datasource.data =  classpath:data.sql
##always
spring.datasource.initialization-mode=never
spring.datasource.separator=^
# 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 默认:30秒
spring.datasource.hikari.connection-timeout=30000
# 最小连接数
spring.datasource.hikari.minimum-idle=5
# 最大连接数
spring.datasource.hikari.maximum-pool-size=30
# 自动提交
spring.datasource.hikari.auto-commit=true
# 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），默认:10分钟
spring.datasource.hikari.idle-timeout=600000
# 连接池名字
spring.datasource.hikari.pool-name=DatebookHikariCP
# 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），默认:30分钟 1800000ms，建议设置比数据库超时时长少60秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） -->  
spring.datasource.hikari.max-lifetime=28740000
spring.datasource.hikari.connection-test-query=SELECT 1

# jpa
spring.jpa.database-platform: org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.show-sql=false
spring.jpa.properties.jadira.usertype.autoRegisterUserTypes=true
spring.jpa.open-in-view=true
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=none




#进行该配置后，h2 web consloe就可以在远程访问了。否则只能在本机访问。
spring.h2.console.settings.web-allow-others=true 
#进行该配置，你就可以通过YOUR_URL/h2-console访问h2 web consloe。YOUR_URL是你程序的访问URl。
spring.h2.console.path=/h2-console     
#进行该配置，程序开启时就会启动h2 web consloe。当然这是默认的，如果你不想在启动程序时启动h2 web consloe，那么就设置为false。           
spring.h2.console.enabled=true            

# cache
spring.cache.type=EHCACHE
spring.cache.ehcache.config=classpath:ehcache.xml


# thymeleaf
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8


spring.thymeleaf.cache=false
spring.mvc.favicon.enabled=true


decorator.datasource.datasource-proxy.logging=slf4j

decorator.datasource.datasource-proxy.query.enable-logging=true
decorator.datasource.datasource-proxy.query.log-level=debug
# Logger name to log all queries, default depends on chosen logging, e.g. net.ttddyy.dsproxy.listener.logging.SLF4JQueryLoggingListener
decorator.datasource.datasource-proxy.query.logger-name=

decorator.datasource.datasource-proxy.slow-query.enable-logging=true
decorator.datasource.datasource-proxy.slow-query.log-level=warn
decorator.datasource.datasource-proxy.slow-query.logger-name=
# Number of seconds to consider query as slow and log it
decorator.datasource.datasource-proxy.slow-query.threshold=300

decorator.datasource.datasource-proxy.multiline=true
decorator.datasource.datasource-proxy.json-format=false
# Enable Query Metrics
decorator.datasource.datasource-proxy.count-query=false



# Increments pool size if connection acquire request has timed out
decorator.datasource.flexy-pool.acquiring-strategy.increment-pool.max-overflow-pool-size=15
decorator.datasource.flexy-pool.acquiring-strategy.increment-pool.timeout-millis=30000

# Retries on getting connection
decorator.datasource.flexy-pool.acquiring-strategy.retry.attempts=5

# Enable metrics exporting to the JMX
decorator.datasource.flexy-pool.metrics.reporter.jmx.enabled=true
decorator.datasource.flexy-pool.metrics.reporter.jmx.auto-start=false

# Millis between two consecutive log reports
decorator.datasource.flexy-pool.metrics.reporter.log.millis=300000

# Enable logging and publishing ConnectionAcquireTimeThresholdExceededEvent when a connection acquire request has timed out
decorator.datasource.flexy-pool.threshold.connection.acquire=50
# Enable logging and publishing ConnectionLeaseTimeThresholdExceededEvent when a connection lease has exceeded the given time threshold
decorator.datasource.flexy-pool.threshold.connection.lease=1000

# Creates span for every connection and query. Works only with p6spy or datasource-proxy.
decorator.datasource.sleuth.enabled=true


